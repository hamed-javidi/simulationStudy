input_layer = Input(shape=input_shape, name='encoder_input')
x = layers.Conv1D(32, 5, 1, padding='same')(input_layer)
x = layers.Activation('relu')(x)
x = layers.Conv1D(32, 5, 1, padding='same')(x)
x = layers.Activation('relu')(x)
x = layers.MaxPooling1D(2, padding='same')(x)  #************Dimension Reduction*************#
x = layers.Conv1D(32, 5, 1, padding='same')(x)
x = layers.Activation('relu')(x)
x = layers.Conv1D(64, 5, 1, padding='same')(x)
x = layers.Activation('relu')(x)
shape_before_flattening = K.int_shape(x)
x = layers.Flatten()(x)
x = layers.Dense(intermediate_dim, activation='relu')(x)
z_mean = layers.Dense(latent_dim, name='latent_mean')(x)
z_sigma = layers.Dense(latent_dim, name='latent_variance')(x)
if KL_loss_flag == True:
z_mean, z_sigma = KLDivergenceLayer()([z_mean, z_sigma])
model_name = 'vae_cnn_w_KLDivergence_loss_'
else:
model_name = 'vae_cnn_wo_KLDivergence_loss_'
z = layers.Lambda(sample_z, output_shape=(latent_dim, ), name='z')([z_mean, z_sigma])
    # Instantiate encoder model
encoder = models.Model(input_layer, [z_mean, z_sigma, z], name='encoder')
if model_plot_flag == True:
encoder.summary()
plot_model(encoder, to_file= save_path + model_name + 'encoder.png', show_shapes=True)
    # ----------------------------------------------------------------------------------------------------------------
    # ------------------------------------------------- Decoder ----------------------------------------------------
    # ----------------------------------------------------------------------------------------------------------------
decoder_input = Input(shape=(latent_dim, ), name='decoder_input')
x = layers.Dense(np.prod(shape_before_flattening[1:]), activation='relu')(decoder_input)
x = layers.Reshape(shape_before_flattening[1:])(x)
x = layers.Conv1D(64, 5, 1, padding='same')(x)
x = layers.Activation('relu')(x)
x = layers.Conv1D(32, 5, 1, padding='same')(x)
x = layers.Activation('relu')(x)
x = layers.UpSampling1D(2)(x)                          #***********Dimension Upsampling************#
x = layers.Conv1D(32, 5, 1, padding='same')(x)
x = layers.Activation('relu')(x)
x = layers.Conv1D(32, 5, 1, padding='same')(x)
x = layers.Activation('relu')(x)
decoder_output = layers.Conv1D(n_channels, 5, 1, padding='same', name='decoder_output')(x)
# Instantiate decoder model
decoder = models.Model(decoder_input, decoder_output, name='decoder')
    if model_plot_flag == True:
        plot_model(decoder, to_file=save_path + model_name + 'decoder.png', show_shapes=True)
    # ----------------------------------------------------------------------------------------------------------------
    # ---------------------------------------------------- VAE Model -----------------------------------------------
    # ----------------------------------------------------------------------------------------------------------------
    # Instantiate VAE
output_layer = decoder(encoder(input_layer)[2])
vae = models.Model(input_layer, output_layer, name='vae_cnn')
    if model_plot_flag == True:
vae.summary()
        plot_model(vae, to_file=save_path + model_name + 'encoder_decoder.png', show_shapes=True)
    # Compile VAE
vae.compile(optimizer='rmsprop', loss=vae_loss)
vae.fit(X, X, epochs = nb_epochs, batch_size = batch_size, shuffle=True) # validation_data=(test_X, test_X)
